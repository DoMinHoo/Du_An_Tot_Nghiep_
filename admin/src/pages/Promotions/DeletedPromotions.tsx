// src/components/DeletedPromotions.tsx
import React from 'react';
import { useNavigate } from 'react-router-dom';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import {
    Table,
    Tag,
    Typography,
    Button,
    Space,
    Popconfirm,
    message,
    Card,
    Tooltip,
} from 'antd';
import { UndoOutlined, DeleteOutlined } from '@ant-design/icons';
import {
    fetchDeletedPromotions,
    restorePromotion,
    permanentDeletePromotion,
} from '../../Services/promotion.service';

const { Title } = Typography;

const DeletedPromotions: React.FC = () => {
    const navigate = useNavigate();
    const queryClient = useQueryClient();

    const { data, isLoading, isError } = useQuery({
        queryKey: ['deletedPromotions'],
        queryFn: fetchDeletedPromotions,
    });

    const restoreMutation = useMutation({
        mutationFn: restorePromotion,
        onSuccess: () => {
            message.success('Kh√¥i ph·ª•c m√£ th√†nh c√¥ng');
            queryClient.invalidateQueries({ queryKey: ['deletedPromotions'] });
            queryClient.invalidateQueries({ queryKey: ['promotions'] }); // C·∫≠p nh·∫≠t danh s√°ch ch√≠nh
        },
        onError: () => {
            message.error('Kh√¥i ph·ª•c m√£ th·∫•t b·∫°i');
        },
    });

    const permanentDeleteMutation = useMutation({
        mutationFn: permanentDeletePromotion,
        onSuccess: () => {
            message.success('X√≥a vƒ©nh vi·ªÖn m√£ th√†nh c√¥ng');
            queryClient.invalidateQueries({ queryKey: ['deletedPromotions'] });
        },
        onError: () => {
            message.error('X√≥a vƒ©nh vi·ªÖn m√£ th·∫•t b·∫°i');
        },
    });

    const handleRestore = (id: string) => {
        restoreMutation.mutate(id);
    };

    const handlePermanentDelete = (id: string) => {
        permanentDeleteMutation.mutate(id);
    };

    const formatCurrency = (value: number) =>
        value?.toLocaleString('vi-VN', {
            style: 'currency',
            currency: 'VND',
        });

    const columns = [
        {
            title: 'M√£',
            dataIndex: 'code',
            key: 'code',
        },
        {
            title: 'Lo·∫°i',
            dataIndex: 'discountType',
            key: 'discountType',
            render: (type: string) =>
                type === 'percentage' ? 'Ph·∫ßn trƒÉm (%)' : 'C·ªë ƒë·ªãnh (VNƒê)',
        },
        {
            title: 'Gi√° tr·ªã',
            dataIndex: 'discountValue',
            key: 'discountValue',
            render: (value: number, record: any) =>
                record.discountType === 'percentage'
                    ? `${value}%`
                    : formatCurrency(value),
        },
        
        // Gi√° t·ªëi ƒëa ƒë∆∞·ª£c gi·∫£m
        {
            title: 'Gi√° t·ªëi ƒëa ƒë∆∞·ª£c gi·∫£m',
            dataIndex: 'maxDiscountPrice',
            key: 'maxDiscountPrice',
            render: (value: number) =>
                value && value > 0 ? formatCurrency(value) : 'Kh√¥ng gi·ªõi h·∫°n',
        },

        {
            title: 'T·ªëi thi·ªÉu',
            dataIndex: 'minOrderValue',
            key: 'minOrderValue',
            render: (value: number) => formatCurrency(value),
        },
        {
            title: 'Gi·ªõi h·∫°n',
            dataIndex: 'usageLimit',
            key: 'usageLimit',
            render: (limit: number) => (limit === 0 ? 'Kh√¥ng gi·ªõi h·∫°n' : limit),
        },
        {
            title: 'ƒê√£ d√πng',
            dataIndex: 'usedCount',
            key: 'usedCount',
        },
        {
            title: 'H·∫øt h·∫°n',
            dataIndex: 'expiryDate',
            key: 'expiryDate',
            render: (date: string) =>
                date ? new Date(date).toLocaleDateString() : 'Kh√¥ng c√≥',
        },
        {
            title: 'X√≥a l√∫c',
            dataIndex: 'deletedAt',
            key: 'deletedAt',
            render: (date: string) =>
                date
                    ? new Date(date).toLocaleString('vi-VN', {
                        dateStyle: 'short',
                        timeStyle: 'short',
                    })
                    : 'Kh√¥ng c√≥',
        },
        {
            title: 'H√†nh ƒë·ªông',
            key: 'action',
            align: 'center' as const,
            fixed: 'right' as const,
            width: 150,
            render: (_: any, record: any) => (
                <Space>
                    <Tooltip title="Kh√¥i ph·ª•c">
                        <Popconfirm
                            title="B·∫°n ch·∫Øc ch·∫Øn mu·ªën kh√¥i ph·ª•c m√£ n√†y?"
                            onConfirm={() => handleRestore(record._id)}
                            okText="Kh√¥i ph·ª•c"
                            cancelText="H·ªßy"
                        >
                            <Button type="text" icon={<UndoOutlined />} />
                        </Popconfirm>
                    </Tooltip>
                    <Tooltip title="X√≥a vƒ©nh vi·ªÖn">
                        <Popconfirm
                            title="B·∫°n ch·∫Øc ch·∫Øn mu·ªën x√≥a vƒ©nh vi·ªÖn m√£ n√†y? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!"
                            onConfirm={() => handlePermanentDelete(record._id)}
                            okText="X√≥a vƒ©nh vi·ªÖn"
                            cancelText="H·ªßy"
                            okButtonProps={{ danger: true }}
                        >
                            <Button type="text" danger icon={<DeleteOutlined />} />
                        </Popconfirm>
                    </Tooltip>
                </Space>
            ),
        },
    ];

    if (isLoading) return <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>;
    if (isError) return <p>ƒê√£ x·∫£y ra l·ªói khi t·∫£i danh s√°ch m√£ ƒë√£ x√≥a.</p>;

    return (
        <div style={{ padding: 24 }}>
            <Card
                title={<Title level={4}>üóëÔ∏è Danh s√°ch M√£ Khuy·∫øn M√£i ƒê√£ X√≥a</Title>}
                extra={
                    <Button type="primary" onClick={() => navigate('/admin/promotions')}>
                        Quay l·∫°i danh s√°ch ch√≠nh
                    </Button>
                }
                bordered
                style={{ borderRadius: 12, boxShadow: '0 4px 12px rgba(0,0,0,0.1)' }}
            >
                <Table
                    columns={columns}
                    dataSource={data}
                    rowKey="_id"
                    pagination={{ pageSize: 8 }}
                    scroll={{ x: 'max-content' }}
                    bordered
                />
            </Card>
        </div>
    );
};

export default DeletedPromotions;
